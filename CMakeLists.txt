# CMakeList.txt: CMake-Projektdatei der obersten Ebene.
#
cmake_minimum_required (VERSION 3.12)
message("Running with CMake Version ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}")

project ("CARLA OSI client" CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

option(GIT_SUBMODULE "Check submodules during build" ON)
if(GIT_SUBMODULE)
	find_package(Git QUIET)
	if(GIT_FOUND AND EXISTS "${PROJECT_SOURCE_DIR}/.git")
		message(STATUS "Updating submodules")
		execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive
						WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
						RESULT_VARIABLE GIT_SUBMODULE_RESULT)
		if(NOT GIT_SUBMODULE_RESULT EQUAL "0")
			message(FATAL_ERROR "git submodule update --init --recursive failed with ${GIT_SUBMODULE_RESULT}")
		endif()
	endif()
endif()

# Download automatically, you can also just copy the conan.cmake file
if(NOT EXISTS "${CMAKE_BINARY_DIR}/conan.cmake")
   message(STATUS "Downloading conan.cmake from https://github.com/conan-io/cmake-conan")
   file(DOWNLOAD "https://github.com/conan-io/cmake-conan/raw/v0.15/conan.cmake"
                 "${CMAKE_BINARY_DIR}/conan.cmake")
endif()

include(${CMAKE_BINARY_DIR}/conan.cmake)

# get dependencies distributed as conan packages
conan_cmake_run(CONANFILE conanfile.txt 
                BASIC_SETUP CMAKE_TARGETS
                BUILD missing)

# include conan packages for protobuf, catch2, fakeit ...
include(${CMAKE_CURRENT_BINARY_DIR}/conanbuildinfo.cmake)

conan_basic_setup()

# Findprotobuf.cmake generated by cmake_find_package conan generator is missing some definitions from the default find script, but catch2 is not found without a defintion for find_package
# => We use our own FindCatch2.cmake module
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules ${CMAKE_MODULE_PATH})

# OSI is not distributed as conan package, but we already took care of installig its dependency (protobuf), so we can just use it as submodule
add_subdirectory(lib/open-simulation-interface/ EXCLUDE_FROM_ALL)

# Read CMake_FetchContent_Overrides for changes of FetchContent_declare default of other included scripts (currently applies to FetchLibCarla_client, only)
include(FetchContent)
include(${CMAKE_CURRENT_LIST_DIR}/CMake_FetchContent_Overrides.cmake OPTIONAL)

# use CMake FetchContent Module to fetch LibCarla_client using our custom FetchLibCarla_client.cmake script
include(FetchLibCarla_client)
fetch_carla_and_non_conan_dependencies()# always use release build of carla client



##main project
# set up variables that are used below
add_subdirectory("src")
add_subdirectory("include")
add_subdirectory("test")


#create library target
add_library(carla-osi-lib ${CARLA_OSI_LIB_SOURCE} ${CARLA_OSI_LIB_INCLUDES})
# carla-osi-lib exports no symbols, thereby preventing linking of its dll on windows. Force export of all global symbols
set_property(TARGET carla-osi-lib PROPERTY WINDOWS_EXPORT_ALL_SYMBOLS ON)
target_include_directories(carla-osi-lib PUBLIC ${CMAKE_CURRENT_LIST_DIR}/include)

# link to conan managed dependencies
target_link_libraries(carla-osi-lib PUBLIC ${CONAN_LIBS})

# CARLA is not managed by conan, thus it is added here when enabled
target_link_libraries(carla-osi-lib PUBLIC LibCarla::LibCarla_client)

# OSI is not managed by conan, thus it is added here
# OSI has differently named targets for static and shared build
if(BUILD_SHARED_LIBS)
	# By default, OSI exports no symbols when building a dll, preventing linking to the shared library on windows. Force export of all global symbols
	set_property(TARGET open_simulation_interface PROPERTY WINDOWS_EXPORT_ALL_SYMBOLS ON)
	target_link_libraries(carla-osi-lib PUBLIC open_simulation_interface)
	message(STATUS "Will build shared library for OSI")
else()
	target_link_libraries(carla-osi-lib PUBLIC open_simulation_interface_static)
	message(STATUS "Will build static library for OSI")
endif(BUILD_SHARED_LIBS)


find_package(Catch2 REQUIRED)
add_executable(test_carla-osi ${TESTFILES})
target_include_directories(test_carla-osi PRIVATE ${CMAKE_CURRENT_LIST_DIR}/include)
target_link_libraries(test_carla-osi carla-osi-lib Catch2::Catch2)

include(CTest)
include(Catch)
catch_discover_tests(test_carla-osi)

add_executable (CARLA-OSI_client "${CMAKE_CURRENT_LIST_DIR}/src/CARLA-OSI.cpp" "${CMAKE_CURRENT_LIST_DIR}/include/CARLA-OSI.h")
target_link_libraries(CARLA-OSI_client PUBLIC carla-osi-lib ${CONAN_LIBS})
target_include_directories(CARLA-OSI_client PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/include/)

# The import section in conanfile.txt is supposed to do the same, but somehow it stopped working.
# so far, only boost is needed. Additional globbing expressions can be added if needed
file(GLOB CONAN_BOOST_LIBS ${CONAN_BIN_DIRS_BOOST}/*.dll )
file(COPY ${CONAN_BOOST_LIBS} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/bin)